CURRENT_DIR := $(shell pwd)
DIRECTORY_NAME := $(notdir $(shell pwd))
TIMESTAMP := $(shell date +%Y%m%d)

PROJECT_NAME ?= poky-kirkstone-4.0.23

MODULE_NAMES += bzip2
MODULE_NAMES += glib-2.0

# Where is source code?
PROJECT_ROOT := $(HOME)/workshop/makefile/yocto/$(PROJECT_NAME)
TARGET_DIRECTORY := $(PROJECT_ROOT)/build/tmp/work/core2-64-poky-linux
BB_ROOT_PATH := $(PROJECT_ROOT)/meta

MODULE_PATHS :=
$(foreach module,$(MODULE_NAMES),\
	$(eval MODULE_PATH := $(shell ls -d $(TARGET_DIRECTORY)/$(module)/*)) \
	$(eval MODULE_PATHS += $(MODULE_PATH)) \
)

BB_FILE_PATHS :=
$(foreach module,$(MODULE_NAMES),\
	$(eval BB_FILE_PATH := $(shell find $(BB_ROOT_PATH) -name "$(module)*.bb"))\
	$(eval BB_FILE_PATHS += $(BB_FILE_PATH)) \
)

# Where is build result?
DESTDIR := $(CURRENT_DIR)/build

# make
.PHONY: all
all:
	@echo ""
	@echo "cd $(PROJECT_ROOT) && source oe-init-build-env"
	@echo "cd $(PWD)"
	@echo ""
	@for module in $(MODULE_NAMES); do \
		echo "bitbake $$module"; \
	done
	@echo ""
	@echo "bb Files on Linux:";
	@for path in $(BB_FILE_PATHS); do \
		echo $$path; \
	done
	@echo ""
	@echo "Build Result on Linux:";
	@for path in $(MODULE_PATHS); do \
		echo $$path; \
	done
	@echo ""

# make clean
.PHONY: clean
clean:
	rm -rf $(DESTDIR)*
	rm -rf *.tar.gz

# make tarball
.PHONY: tarball
tarball:
	mkdir -p $(DESTDIR)
	@for path in $(MODULE_PATHS); do \
		cp -r $$path/image/* $(DESTDIR); \
	done
	cd $(DESTDIR) && tar czf build-$(DIRECTORY_NAME)_$(TIMESTAMP).tar.gz *
	mv $(DESTDIR)/build-$(DIRECTORY_NAME)*.tar.gz .
